name: CI

on:
  push:
  pull_request:

jobs:
  test-and-run:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: elevator_api
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: pytest -q

      - name: Wait for Postgres readiness
        env:
          PGHOST: localhost
          PGPORT: '5432'
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: elevator_api
        run: |
          python - <<'PY'
          import time, sys
          import psycopg
          for i in range(60):
              try:
                  with psycopg.connect("postgresql://postgres:postgres@localhost:5432/elevator_api") as conn:
                      with conn.cursor() as cur:
                          cur.execute("SELECT 1")
                          print("Postgres is ready")
                          sys.exit(0)
              except Exception as e:
                  time.sleep(1)
          print("Postgres did not become ready in time", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Run app (background)
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevator_api
          NUM_ELEVATORS: '3'
          NUM_FLOORS: '10'
          FLOOR_MOVE_TIME: '5.0'
          DOOR_TIME: '2.0'
        run: nohup python run.py > app.log 2>&1 &

      - name: Smoke test health endpoint
        run: |
          for i in {1..30}; do
            if curl -sSf http://127.0.0.1:5000/health/health > /dev/null; then
              echo "Health endpoint OK"
              exit 0
            fi
            sleep 1
          done
          echo "App did not become healthy in time" >&2
          echo "===== app.log ====="
          cat app.log || true
          exit 1


